import { BookChange, Trade } from '../types';
import { Mapper } from './mapper';
export declare class UpbitTradesMapper implements Mapper<'upbit', Trade> {
    canHandle(message: UpbitTrade): boolean;
    getFilters(symbols?: string[]): {
        readonly channel: "trade";
        readonly symbols: string[] | undefined;
    }[];
    map(message: UpbitTrade, localTimestamp: Date): IterableIterator<Trade>;
}
export declare class UpbitBookChangeMapper implements Mapper<'upbit', BookChange> {
    canHandle(message: UpbitOrderBook): boolean;
    getFilters(symbols?: string[]): {
        readonly channel: "orderbook";
        readonly symbols: string[] | undefined;
    }[];
    map(message: UpbitOrderBook, localTimestamp: Date): IterableIterator<BookChange>;
}
declare type UpbitTrade = {
    type: 'trade';
    code: 'KRW-DOGE';
    timestamp: 1614729599905;
    trade_date: '2021-03-02';
    trade_time: '23:59:59';
    trade_timestamp: 1614729599000;
    trade_price: 58.4;
    trade_volume: 836.12040133;
    ask_bid: 'ASK';
    prev_closing_price: 57.5;
    change: 'RISE';
    change_price: 0.9;
    sequential_id: 1614729599000000;
    stream_type: 'REALTIME';
};
declare type UpbitOrderBook = {
    type: 'orderbook';
    code: 'KRW-DOT';
    timestamp: 1614729599677;
    total_ask_size: 1415.12521016;
    total_bid_size: 8058.44442437;
    orderbook_units: {
        ask_price: number;
        bid_price: number;
        ask_size: number;
        bid_size: number;
    }[];
    stream_type: 'REALTIME';
};
export {};
//# sourceMappingURL=upbit.d.ts.map