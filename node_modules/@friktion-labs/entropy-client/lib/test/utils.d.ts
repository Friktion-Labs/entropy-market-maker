import { Market } from '@project-serum/serum';
import { Token, u64 } from '@solana/spl-token';
import { Account, Connection, PublicKey, Transaction, TransactionInstruction, TransactionSignature } from '@solana/web3.js';
import { EntropyClient } from '../src';
import EntropyGroup from '../src/EntropyGroup';
import EntropyAccount from '../src/EntropyAccount';
export declare const EntropyProgramId: PublicKey;
export declare const DexProgramId: PublicKey;
export declare const USDCMint: PublicKey;
export declare const FeesVault: PublicKey;
export declare const MSRMMint: PublicKey;
export declare const OPTIMAL_UTIL = 0.7;
export declare const OPTIMAL_RATE = 0.06;
export declare const MAX_RATE = 1.5;
export declare function _sendTransaction(connection: Connection, transaction: Transaction, signers: Account[]): Promise<TransactionSignature>;
export declare function createDevnetConnection(): Connection;
export declare function airdropSol(connection: Connection, account: Account, amount: number): Promise<void>;
export declare function createOracle(connection: Connection, programId: PublicKey, payer: Account): Promise<PublicKey>;
export declare function createAccount(connection: Connection, solBalance?: number): Promise<Account>;
export declare function createTokenAccountWithBalance(connection: Connection, owner: Account, tokenMint: PublicKey, tokenDecimals: number, faucetId: PublicKey, amount: number): Promise<PublicKey>;
export declare function airdropTokens(connection: Connection, feePayerAccount: Account, faucetPubkey: PublicKey, tokenDestinationPublicKey: PublicKey, mint: PublicKey, amount: u64): Promise<string>;
export declare function buildAirdropTokensIx(amount: u64, tokenMintPublicKey: PublicKey, destinationAccountPubkey: PublicKey, faucetPubkey: PublicKey): Promise<TransactionInstruction>;
export declare function createTokenAccount(connection: Connection, mint: PublicKey, owner: Account): Promise<PublicKey>;
export declare function createTokenAccountInstrs(connection: Connection, newAccountPubkey: PublicKey, mint: PublicKey, ownerPk: PublicKey, lamports?: number): Promise<TransactionInstruction[]>;
export declare function createMint(connection: Connection, payer: Account, decimals: number): Promise<Token>;
export declare function createMints(connection: Connection, payer: Account, quantity: number): Promise<Token[]>;
export declare function listMarket(connection: Connection, payer: Account, baseMint: PublicKey, quoteMint: PublicKey, baseLotSize: number, quoteLotSize: number, dexProgramId: PublicKey): Promise<PublicKey>;
export declare function listMarkets(connection: Connection, payer: Account, dexProgramId: PublicKey, mints: Token[], quoteMintPK: PublicKey): Promise<PublicKey[]>;
export declare function mintToTokenAccount(payer: Account, mint: Token, tokenAccountPk: PublicKey, balance: number): Promise<void>;
export declare function createUserTokenAccount(payer: Account, mint: Token, balance: number): Promise<PublicKey>;
export declare function createUserTokenAccounts(payer: Account, mints: Token[], balances: number[] | null): Promise<PublicKey[]>;
export declare function addSpotMarketToEntropyGroup(client: EntropyClient, payer: Account, entropyGroup: EntropyGroup, mint: Token, spotMarketPk: PublicKey, marketIndex: number, initialPrice: number): Promise<void>;
export declare function addSpotMarketsToEntropyGroup(client: EntropyClient, payer: Account, entropyGroupPk: PublicKey, mints: Token[], spotMarketPks: PublicKey[]): Promise<EntropyGroup>;
export declare function getNodeBank(client: EntropyClient, entropyGroup: EntropyGroup, bankIndex: number): Promise<any>;
export declare function cachePrices(client: EntropyClient, payer: Account, entropyGroup: EntropyGroup, oracleIndices: number[]): Promise<void>;
export declare function cacheRootBanks(client: EntropyClient, payer: Account, entropyGroup: EntropyGroup, rootBankIndices: number[]): Promise<void>;
export declare function performDeposit(client: EntropyClient, payer: Account, entropyGroup: EntropyGroup, entropyAccount: EntropyAccount, nodeBank: any, //Todo: Can make explicit NodeBank maybe
tokenAccountPk: PublicKey, tokenIndex: number, quantity: number): Promise<EntropyAccount>;
export declare function getMarket(client: EntropyClient, entropyGroup: EntropyGroup, marketIndex: number): Promise<Market>;
export declare function placeSpotOrder(client: EntropyClient, payer: Account, entropyGroup: EntropyGroup, entropyAccount: EntropyAccount, market: Market): Promise<EntropyAccount>;
//# sourceMappingURL=utils.d.ts.map