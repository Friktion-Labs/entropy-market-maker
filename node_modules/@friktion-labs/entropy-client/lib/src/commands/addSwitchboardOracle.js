"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_js_1 = require("@solana/web3.js");
const client_1 = require("../client");
const config_1 = require("../config");
// devnet
const SWITCHBOARD_ORACLES_DEVNET = {
// MNGO: '8k7F9Xb36oFJsjpCKpsXvg4cgBRoZtwNTc3EzG5Ttd2o',
// // SOL2: '83jN7eN5wUBsTAZ7tMrmpQxw6qQfTD8FrpuYS32hZBqT'
// SOL: 'GvDMxPzN1sCj7L26YDK2HnMRXEQmQ2aemov8YBtPS7vR',
// SOL2: '83jN7eN5wUBsTAZ7tMrmpQxw6qQfTD8FrpuYS32hZBqT',
// BTC: '8SXvChNYFhRq4EZuZvnhjrB3jJRQCv4k3P4W6hesH3Ee',
// 'BTC^2': '8SXvChNYFhRq4EZuZvnhjrB3jJRQCv4k3P4W6hesH3Ee',
// BTC_1D_IV: 'GHSk7tFwEaT914kL168wcKZnwHq7opZ8GNAoV56xHmJM',
// BTC_7D_IV: 'FrqVoiu2raniHHNHguyz88r7JebpYKqjERikvJxujmUi',
// BTC_14D_IV: '8qvGHYRHknsTEU2h3UBAdbrtqdEBUufGwHpog1XeFRh5',
// BTC_28D_IV: '89xjL6wKFS7G9TjjcjydXUm69QjKjaNJrJwy3sdD4kN3',
};
// mainnet
const SWITCHBOARD_ORACLES_MAINNET = {
    'BTC^2': '3HtmwdXJPAdMZ73fTGeCFgbDQZGLZWpmsm3JAB5quGJN',
    BTC_1D_IV: '57HtzNrNGP7LtzsdRbmFqj5jgHUKL2HR2wnrPSrd4Qyu'
};
function addSwitchboardOracle(connection, payer, groupConfig, symbol) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log({
            connection,
            payer,
            groupConfig,
            symbol,
        });
        const client = new client_1.EntropyClient(connection, groupConfig.entropyProgramId);
        const group = yield client.getEntropyGroup(groupConfig.publicKey);
        let oraclePk;
        if (groupConfig.cluster === 'mainnet') {
            oraclePk = new web3_js_1.PublicKey(SWITCHBOARD_ORACLES_MAINNET[symbol]);
        }
        else {
            oraclePk = new web3_js_1.PublicKey(SWITCHBOARD_ORACLES_DEVNET[symbol]);
        }
        console.log('oracle pk = ', oraclePk.toString());
        yield client.addOracle(group, oraclePk, payer);
        const oracle = {
            symbol: symbol,
            publicKey: oraclePk,
        };
        const _oracle = (0, config_1.getOracleBySymbol)(groupConfig, symbol);
        if (_oracle) {
            Object.assign(_oracle, oracle);
        }
        else {
            groupConfig.oracles.push(oracle);
        }
        return groupConfig;
    });
}
exports.default = addSwitchboardOracle;
//# sourceMappingURL=addSwitchboardOracle.js.map