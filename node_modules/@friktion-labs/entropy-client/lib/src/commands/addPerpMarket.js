"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// import { uiToNative } from '..';
const client_1 = require("../client");
const config_1 = require("../config");
function addPerpMarket(connection, payer, groupConfig, symbol, maintLeverage, initLeverage, liquidationFee, makerFee, takerFee, baseLotSize, quoteLotSize, maxNumEvents, rate, maxDepthBps, targetPeriodLength, mngoPerPeriod, exp) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        console.log({
            connection,
            payer,
            groupConfig,
            symbol,
        });
        const client = new client_1.EntropyClient(connection, groupConfig.entropyProgramId);
        let group = yield client.getEntropyGroup(groupConfig.publicKey);
        const oracleDesc = (0, config_1.getOracleBySymbol)(groupConfig, symbol);
        const marketIndex = group.getOracleIndex(oracleDesc.publicKey);
        // Adding perp market
        const nativeMngoPerPeriod = 0;
        // if (rate !== 0) {
        //   const token = getTokenBySymbol(groupConfig, 'MNGO');
        //   if (token === undefined) {
        //     throw new Error('MNGO not found in group config');
        //   } else {
        //     nativeMngoPerPeriod = uiToNative(
        //       mngoPerPeriod,
        //       token.decimals,
        //     ).toNumber();
        //   }
        // }
        console.log('running addPerpMarket');
        yield client.addPerpMarket(group, oracleDesc.publicKey, config_1.entropyMints[groupConfig.cluster], payer, maintLeverage, initLeverage, liquidationFee, makerFee, takerFee, baseLotSize, quoteLotSize, maxNumEvents, rate, maxDepthBps, targetPeriodLength, nativeMngoPerPeriod, exp);
        console.log('done');
        group = yield client.getEntropyGroup(groupConfig.publicKey);
        const marketPk = group.perpMarkets[marketIndex].perpMarket;
        console.log("cluster: ", groupConfig.cluster);
        let baseDecimals;
        try {
            baseDecimals = (_a = (0, config_1.getTokenBySymbol)(groupConfig, symbol)) === null || _a === void 0 ? void 0 : _a.decimals;
        }
        catch (err) {
            console.log('defaulting to six decimals for ', symbol, '!');
            baseDecimals = 6;
        }
        const quoteDecimals = (_b = (0, config_1.getTokenBySymbol)(groupConfig, groupConfig.quoteSymbol)) === null || _b === void 0 ? void 0 : _b.decimals;
        const market = yield client.getPerpMarket(marketPk, baseDecimals, quoteDecimals);
        const marketDesc = {
            name: `${symbol}-PERP`,
            publicKey: marketPk,
            baseSymbol: symbol,
            baseDecimals,
            quoteDecimals,
            marketIndex,
            bidsKey: market.bids,
            asksKey: market.asks,
            eventsKey: market.eventQueue,
        };
        const marketConfig = (0, config_1.getPerpMarketByBaseSymbol)(groupConfig, symbol);
        if (marketConfig) {
            Object.assign(marketConfig, marketDesc);
        }
        else {
            groupConfig.perpMarkets.push(marketDesc);
        }
        return groupConfig;
    });
}
exports.default = addPerpMarket;
//# sourceMappingURL=addPerpMarket.js.map