"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_js_1 = require("@solana/web3.js");
const client_1 = require("./client");
const config_1 = require("./config");
const os = __importStar(require("os"));
const fs = __importStar(require("fs"));
const config = config_1.Config.ids();
const cluster = (process.env.CLUSTER || 'mainnet');
const connection = new web3_js_1.Connection(config.cluster_urls[cluster], 'confirmed');
const groupName = process.env.GROUP || 'mainnet.2';
const groupIds = config.getGroup(cluster, groupName);
if (!groupIds) {
    throw new Error(`Group ${groupName} not found`);
}
const entropyProgramId = groupIds.entropyProgramId;
const entropyGroupKey = groupIds.publicKey;
const client = new client_1.EntropyClient(connection, entropyProgramId);
const payer = new web3_js_1.Account(JSON.parse(process.env.KEYPAIR ||
    fs.readFileSync(os.homedir() + '/.config/solana/entropy-mainnet-authority.json', 'utf-8')));
function check() {
    return __awaiter(this, void 0, void 0, function* () {
        const group = yield client.getEntropyGroup(entropyGroupKey);
        const entropyAccounts = yield client.getAllEntropyAccounts(group, undefined, true);
        let total = 0;
        for (const entropyAccount of entropyAccounts) {
            const oos = entropyAccount.spotOpenOrdersAccounts;
            const shouldFix = oos.some((oo, i) => {
                if (oo) {
                    const freeSlotBitsStr = oo['freeSlotBits'].toString();
                    const isEmpty = oo.quoteTokenTotal.isZero() &&
                        oo.baseTokenTotal.isZero() &&
                        oo['referrerRebatesAccrued'].isZero() &&
                        freeSlotBitsStr == '340282366920938463463374607431768211455';
                    const inBasketAndEmpty = entropyAccount.inMarginBasket[i] && isEmpty;
                    const notInBasketAndNotEmpty = !entropyAccount.inMarginBasket[i] && !isEmpty;
                    if (inBasketAndEmpty || notInBasketAndNotEmpty) {
                        console.log(entropyAccount.publicKey.toString(), entropyAccount.name, inBasketAndEmpty, notInBasketAndNotEmpty, oo.quoteTokenTotal.toString(), oo.baseTokenTotal.toString(), oo['referrerRebatesAccrued'].toString(), freeSlotBitsStr);
                    }
                    return inBasketAndEmpty || notInBasketAndNotEmpty;
                }
            });
            if (shouldFix) {
                // await client.updateMarginBasket(group, entropyAccount, payer);
                total++;
            }
        }
        console.log('Total', total);
    });
}
check();
//# sourceMappingURL=checkMarginBaskets.js.map