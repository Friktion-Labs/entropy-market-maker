"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os = __importStar(require("os"));
const fs = __importStar(require("fs"));
const client_1 = require("./client");
const web3_js_1 = require("@solana/web3.js");
const ids_json_1 = __importDefault(require("./ids.json"));
const config_1 = require("./config");
function readKeypair() {
    return JSON.parse(process.env.KEYPAIR ||
        fs.readFileSync(os.homedir() + '/.config/solana/entropy-mainnet-authority.json', 'utf-8'));
}
function readKeypair_opp() {
    return JSON.parse(process.env.KEYPAIR ||
        fs.readFileSync(os.homedir() + '/.config/solana/id.json', 'utf-8'));
}
function examplePerp() {
    return __awaiter(this, void 0, void 0, function* () {
        // setup client
        const config = new config_1.Config(ids_json_1.default);
        const groupConfig = config.getGroup('devnet', 'devnet.2');
        const connection = new web3_js_1.Connection('https://api.devnet.solana.com', 'confirmed');
        const client = new client_1.EntropyClient(connection, groupConfig.entropyProgramId);
        const entropyGroup = yield client.getEntropyGroup(groupConfig.publicKey);
        // // load group & market
        const perpMarketConfig = (0, config_1.getMarketByBaseSymbolAndKind)(groupConfig, 'SOL', 'perp');
        const perpMarket = yield entropyGroup.loadPerpMarket(connection, perpMarketConfig.marketIndex, perpMarketConfig.baseDecimals, perpMarketConfig.quoteDecimals);
        // Fetch orderbooks
        const bids = yield perpMarket.loadBids(connection);
        const asks = yield perpMarket.loadAsks(connection);
        // Place order
        const owner = new web3_js_1.Account(readKeypair());
        const asker = new web3_js_1.Account(readKeypair_opp());
        const entropyAccount = (yield client.getEntropyAccountsForOwner(entropyGroup, owner.publicKey))[0];
        const entropyAccount_two = (yield client.getEntropyAccountsForOwner(entropyGroup, asker.publicKey))[0];
        yield client.placePerpOrder(entropyGroup, entropyAccount, entropyGroup.entropyCache, perpMarket, owner, 'sell', // or 'sell'
        140, 0.1, 'limit'); // or 'ioc' or 'postOnly'
        yield client.placePerpOrder(entropyGroup, entropyAccount_two, entropyGroup.entropyCache, perpMarket, asker, 'buy', // or 'sell'
        160, 0.1, 'limit'); // or 'ioc' or 'postOnly'
    });
}
examplePerp();
//# sourceMappingURL=psol_orders.js.map