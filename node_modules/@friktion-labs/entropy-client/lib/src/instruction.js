"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeChangeMaxEntropyAccountsInstruction = exports.makeUpdateMarginBasketInstruction = exports.makeExecutePerpTriggerOrderInstruction = exports.makeAddPerpTriggerOrderInstruction = exports.makeInitAdvancedOrdersInstruction = exports.makeRemoveAdvancedOrderInstruction = exports.makeSetGroupAdminInstruction = exports.makeChangePerpMarketParams2Instruction = exports.makeChangePerpMarketParamsInstruction = exports.makeWithdrawMsrmInstruction = exports.makeDepositMsrmInstruction = exports.makeAddEntropyAccountInfoInstruction = exports.makeRedeemMngoInstruction = exports.makeResolveTokenBankruptcyInstruction = exports.makeResolvePerpBankruptcyInstruction = exports.makeSettleFeesInstruction = exports.makeLiquidatePerpMarketInstruction = exports.makeLiquidateTokenAndPerpInstruction = exports.makeLiquidateTokenAndTokenInstruction = exports.makeForceCancelPerpOrdersInstruction = exports.makeForceCancelSpotOrdersInstruction = exports.makeUpdateFundingInstruction = exports.makePlacePerpOrderInstruction = exports.makeConsumeEventsInstruction = exports.makeSettlePnlInstruction = exports.makeCachePerpMarketsInstruction = exports.makeCreatePerpMarketInstruction = exports.makeAddPerpMarketInstruction = exports.makeSetOracleInstruction = exports.makeAddOracleInstruction = exports.makeUpdateRootBankInstruction = exports.makePlaceSpotOrder2Instruction = exports.makePlaceSpotOrderInstruction = exports.makeInitSpotOpenOrdersInstruction = exports.makeAddSpotMarketInstruction = exports.makeCachePerpMarketInstruction = exports.makeCachePricesInstruction = exports.makeCacheRootBankInstruction = exports.makeDepositInstruction = exports.makeCancelAllPerpOrdersInstruction = exports.makeCancelPerpOrderByClientIdInstruction = exports.makeCancelPerpOrderInstruction = exports.makeCancelSpotOrderInstruction = exports.makeSettleFundsInstruction = exports.makeWithdrawInstruction = exports.makeInitEntropyAccountInstruction = exports.makeInitEntropyGroupInstruction = void 0;
const web3_js_1 = require("@solana/web3.js");
const layout_1 = require("./layout");
const spl_token_1 = require("@solana/spl-token");
const fixednum_1 = require("./fixednum");
const _1 = require(".");
// const SERUM_FEES_VAULT = new PublicKey("APBH71knizgDfsY3kYkv9PDhTizaJXywC1XNNRLwdKHQ");
function makeInitEntropyGroupInstruction(programId, entropyGroupPk, signerKey, payerPk, quoteMintPk, quoteVaultPk, quoteNodeBankPk, quoteRootBankPk, insuranceVaultPk, msrmVaultPk, feesVaultPk, entropyCachePk, dexProgramPk, signerNonce, validInterval, quoteOptimalUtil, quoteOptimalRate, quoteMaxRate) {
    const keys = [
        { isSigner: false, isWritable: true, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: signerKey },
        { isSigner: true, isWritable: false, pubkey: payerPk },
        { isSigner: false, isWritable: false, pubkey: quoteMintPk },
        { isSigner: false, isWritable: true, pubkey: quoteVaultPk },
        { isSigner: false, isWritable: true, pubkey: quoteNodeBankPk },
        { isSigner: false, isWritable: true, pubkey: quoteRootBankPk },
        { isSigner: false, isWritable: false, pubkey: insuranceVaultPk },
        { isSigner: false, isWritable: false, pubkey: msrmVaultPk },
        { isSigner: false, isWritable: false, pubkey: feesVaultPk },
        { isSigner: false, isWritable: true, pubkey: entropyCachePk },
        { isSigner: false, isWritable: false, pubkey: dexProgramPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        InitEntropyGroup: {
            signerNonce,
            validInterval,
            quoteOptimalUtil,
            quoteOptimalRate,
            quoteMaxRate,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId: programId,
    });
}
exports.makeInitEntropyGroupInstruction = makeInitEntropyGroupInstruction;
function makeInitEntropyAccountInstruction(programId, entropyGroupPk, entropyAccountPk, ownerPk) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: ownerPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({ InitEntropyAccount: {} });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeInitEntropyAccountInstruction = makeInitEntropyAccountInstruction;
function makeWithdrawInstruction(programId, entropyGroupPk, entropyAccountPk, walletPk, entropyCachePk, rootBankPk, nodeBankPk, vaultPk, tokenAccPk, signerKey, openOrders, nativeQuantity, allowBorrow) {
    const withdrawKeys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: walletPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: false, pubkey: rootBankPk },
        { isSigner: false, isWritable: true, pubkey: nodeBankPk },
        { isSigner: false, isWritable: true, pubkey: vaultPk },
        { isSigner: false, isWritable: true, pubkey: tokenAccPk },
        { isSigner: false, isWritable: false, pubkey: signerKey },
        { isSigner: false, isWritable: false, pubkey: spl_token_1.TOKEN_PROGRAM_ID },
        ...openOrders.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
    ];
    const withdrawData = (0, layout_1.encodeEntropyInstruction)({
        Withdraw: { quantity: nativeQuantity, allowBorrow },
    });
    return new web3_js_1.TransactionInstruction({
        keys: withdrawKeys,
        data: withdrawData,
        programId,
    });
}
exports.makeWithdrawInstruction = makeWithdrawInstruction;
function makeSettleFundsInstruction(programId, entropyGroupPk, entropyCachePk, ownerPk, entropyAccountPk, dexProgramId, spotMarketPk, openOrdersPk, signerKey, spotMarketBaseVaultPk, spotMarketQuoteVaultPk, baseRootBankPk, baseNodeBankPk, quoteRootBankPk, quoteNodeBankPk, baseVaultPk, quoteVaultPk, dexSignerKey) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: true, isWritable: false, pubkey: ownerPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: false, isWritable: false, pubkey: dexProgramId },
        { isSigner: false, isWritable: true, pubkey: spotMarketPk },
        { isSigner: false, isWritable: true, pubkey: openOrdersPk },
        { isSigner: false, isWritable: false, pubkey: signerKey },
        { isSigner: false, isWritable: true, pubkey: spotMarketBaseVaultPk },
        { isSigner: false, isWritable: true, pubkey: spotMarketQuoteVaultPk },
        { isSigner: false, isWritable: false, pubkey: baseRootBankPk },
        { isSigner: false, isWritable: true, pubkey: baseNodeBankPk },
        { isSigner: false, isWritable: false, pubkey: quoteRootBankPk },
        { isSigner: false, isWritable: true, pubkey: quoteNodeBankPk },
        { isSigner: false, isWritable: true, pubkey: baseVaultPk },
        { isSigner: false, isWritable: true, pubkey: quoteVaultPk },
        { isSigner: false, isWritable: false, pubkey: dexSignerKey },
        { isSigner: false, isWritable: false, pubkey: spl_token_1.TOKEN_PROGRAM_ID },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({ SettleFunds: {} });
    return new web3_js_1.TransactionInstruction({ keys, data, programId });
}
exports.makeSettleFundsInstruction = makeSettleFundsInstruction;
function makeCancelSpotOrderInstruction(programId, entropyGroupPk, ownerPk, entropyAccountPk, dexProgramId, spotMarketPk, bidsPk, asksPk, openOrdersPk, signerKey, eventQueuePk, order) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: true, isWritable: false, pubkey: ownerPk },
        { isSigner: false, isWritable: false, pubkey: entropyAccountPk },
        { isSigner: false, isWritable: false, pubkey: dexProgramId },
        { isSigner: false, isWritable: true, pubkey: spotMarketPk },
        { isSigner: false, isWritable: true, pubkey: bidsPk },
        { isSigner: false, isWritable: true, pubkey: asksPk },
        { isSigner: false, isWritable: true, pubkey: openOrdersPk },
        { isSigner: false, isWritable: false, pubkey: signerKey },
        { isSigner: false, isWritable: true, pubkey: eventQueuePk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        CancelSpotOrder: {
            side: order.side,
            orderId: order.orderId,
        },
    });
    return new web3_js_1.TransactionInstruction({ keys, data, programId });
}
exports.makeCancelSpotOrderInstruction = makeCancelSpotOrderInstruction;
function makeCancelPerpOrderInstruction(programId, entropyGroupPk, entropyAccountPk, ownerPk, perpMarketPk, bidsPk, asksPk, order, invalidIdOk) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: ownerPk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: false, isWritable: true, pubkey: bidsPk },
        { isSigner: false, isWritable: true, pubkey: asksPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        CancelPerpOrder: {
            orderId: order.orderId,
            invalidIdOk,
        },
    });
    console.log(order, order.orderId.toArray(), data);
    return new web3_js_1.TransactionInstruction({ keys, data, programId });
}
exports.makeCancelPerpOrderInstruction = makeCancelPerpOrderInstruction;
function makeCancelPerpOrderByClientIdInstruction(programId, entropyGroupPk, entropyAccountPk, ownerPk, perpMarketPk, bidsPk, asksPk, clientOrderId, invalidIdOk) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: ownerPk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: false, isWritable: true, pubkey: bidsPk },
        { isSigner: false, isWritable: true, pubkey: asksPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        CancelPerpOrderByClientId: {
            clientOrderId,
            invalidIdOk,
        },
    });
    return new web3_js_1.TransactionInstruction({ keys, data, programId });
}
exports.makeCancelPerpOrderByClientIdInstruction = makeCancelPerpOrderByClientIdInstruction;
function makeCancelAllPerpOrdersInstruction(programId, entropyGroupPk, entropyAccountPk, ownerPk, perpMarketPk, bidsPk, asksPk, limit) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: ownerPk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: false, isWritable: true, pubkey: bidsPk },
        { isSigner: false, isWritable: true, pubkey: asksPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        CancelAllPerpOrders: {
            limit,
        },
    });
    return new web3_js_1.TransactionInstruction({ keys, data, programId });
}
exports.makeCancelAllPerpOrdersInstruction = makeCancelAllPerpOrdersInstruction;
function makeDepositInstruction(programId, entropyGroupPk, ownerPk, merpsCachePk, entropyAccountPk, rootBankPk, nodeBankPk, vaultPk, tokenAccPk, nativeQuantity) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: ownerPk },
        { isSigner: false, isWritable: false, pubkey: merpsCachePk },
        { isSigner: false, isWritable: false, pubkey: rootBankPk },
        { isSigner: false, isWritable: true, pubkey: nodeBankPk },
        { isSigner: false, isWritable: true, pubkey: vaultPk },
        { isSigner: false, isWritable: false, pubkey: spl_token_1.TOKEN_PROGRAM_ID },
        { isSigner: false, isWritable: true, pubkey: tokenAccPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        Deposit: { quantity: nativeQuantity },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeDepositInstruction = makeDepositInstruction;
function makeCacheRootBankInstruction(programId, entropyGroupPk, entropyCachePk, rootBanks) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyCachePk },
        ...rootBanks.map((pubkey) => ({
            isSigner: false,
            isWritable: true,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        CacheRootBanks: {},
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeCacheRootBankInstruction = makeCacheRootBankInstruction;
function makeCachePricesInstruction(programId, entropyGroupPk, entropyCachePk, oracles) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyCachePk },
        ...oracles.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        CachePrices: {},
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeCachePricesInstruction = makeCachePricesInstruction;
function makeCachePerpMarketInstruction(programId, entropyGroupPk, entropyCachePk, perpMarketPks) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyCachePk },
        ...perpMarketPks.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        CachePerpMarkets: {},
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeCachePerpMarketInstruction = makeCachePerpMarketInstruction;
function makeAddSpotMarketInstruction(programId, entropyGroupPk, oraclePk, spotMarketPk, serumDexPk, mintPk, nodeBankPk, vaultPk, rootBankPk, adminPk, maintLeverage, initLeverage, liquidationFee, optimalUtil, optimalRate, maxRate) {
    const keys = [
        { isSigner: false, isWritable: true, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: oraclePk },
        { isSigner: false, isWritable: false, pubkey: spotMarketPk },
        { isSigner: false, isWritable: false, pubkey: serumDexPk },
        { isSigner: false, isWritable: false, pubkey: mintPk },
        { isSigner: false, isWritable: true, pubkey: nodeBankPk },
        { isSigner: false, isWritable: false, pubkey: vaultPk },
        { isSigner: false, isWritable: true, pubkey: rootBankPk },
        { isSigner: true, isWritable: false, pubkey: adminPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        AddSpotMarket: {
            maintLeverage,
            initLeverage,
            liquidationFee,
            optimalUtil,
            optimalRate,
            maxRate,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeAddSpotMarketInstruction = makeAddSpotMarketInstruction;
function makeInitSpotOpenOrdersInstruction(programId, entropyGroupPk, entropyAccountPk, ownerPk, serumDexPk, openOrdersPk, spotMarketPk, signerPk) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: ownerPk },
        { isSigner: false, isWritable: false, pubkey: serumDexPk },
        { isSigner: false, isWritable: true, pubkey: openOrdersPk },
        { isSigner: false, isWritable: false, pubkey: spotMarketPk },
        { isSigner: false, isWritable: false, pubkey: signerPk },
        { isSigner: false, isWritable: false, pubkey: web3_js_1.SYSVAR_RENT_PUBKEY },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        InitSpotOpenOrders: {},
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeInitSpotOpenOrdersInstruction = makeInitSpotOpenOrdersInstruction;
function makePlaceSpotOrderInstruction(programId, entropyGroupPk, entropyAccountPk, ownerPk, entropyCachePk, serumDexPk, spotMarketPk, bidsPk, asksPk, requestQueuePk, eventQueuePk, spotMktBaseVaultPk, spotMktQuoteVaultPk, baseRootBankPk, baseNodeBankPk, baseVaultPk, quoteRootBankPk, quoteNodeBankPk, quoteVaultPk, signerPk, dexSignerPk, msrmOrSrmVaultPk, 
// pass in only openOrders in margin basket, and only the market index one should be writable
openOrders, side, limitPrice, maxBaseQuantity, maxQuoteQuantity, selfTradeBehavior, orderType, clientId) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: ownerPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: false, pubkey: serumDexPk },
        { isSigner: false, isWritable: true, pubkey: spotMarketPk },
        { isSigner: false, isWritable: true, pubkey: bidsPk },
        { isSigner: false, isWritable: true, pubkey: asksPk },
        { isSigner: false, isWritable: true, pubkey: requestQueuePk },
        { isSigner: false, isWritable: true, pubkey: eventQueuePk },
        { isSigner: false, isWritable: true, pubkey: spotMktBaseVaultPk },
        { isSigner: false, isWritable: true, pubkey: spotMktQuoteVaultPk },
        { isSigner: false, isWritable: false, pubkey: baseRootBankPk },
        { isSigner: false, isWritable: true, pubkey: baseNodeBankPk },
        { isSigner: false, isWritable: true, pubkey: baseVaultPk },
        { isSigner: false, isWritable: false, pubkey: quoteRootBankPk },
        { isSigner: false, isWritable: true, pubkey: quoteNodeBankPk },
        { isSigner: false, isWritable: true, pubkey: quoteVaultPk },
        { isSigner: false, isWritable: false, pubkey: spl_token_1.TOKEN_PROGRAM_ID },
        { isSigner: false, isWritable: false, pubkey: signerPk },
        { isSigner: false, isWritable: false, pubkey: web3_js_1.SYSVAR_RENT_PUBKEY },
        { isSigner: false, isWritable: false, pubkey: dexSignerPk },
        { isSigner: false, isWritable: false, pubkey: msrmOrSrmVaultPk },
        ...openOrders.map(({ pubkey, isWritable }) => ({
            isSigner: false,
            isWritable,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        PlaceSpotOrder: {
            side,
            limitPrice,
            maxBaseQuantity,
            maxQuoteQuantity,
            selfTradeBehavior,
            orderType,
            clientId,
            limit: 65535,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makePlaceSpotOrderInstruction = makePlaceSpotOrderInstruction;
function makePlaceSpotOrder2Instruction(programId, entropyGroupPk, entropyAccountPk, ownerPk, entropyCachePk, serumDexPk, spotMarketPk, bidsPk, asksPk, requestQueuePk, eventQueuePk, spotMktBaseVaultPk, spotMktQuoteVaultPk, baseRootBankPk, baseNodeBankPk, baseVaultPk, quoteRootBankPk, quoteNodeBankPk, quoteVaultPk, signerPk, dexSignerPk, msrmOrSrmVaultPk, 
// pass in only openOrders in margin basket, and only the market index one should be writable
openOrders, side, limitPrice, maxBaseQuantity, maxQuoteQuantity, selfTradeBehavior, orderType, clientOrderId) {
    // TODO - this is wrong, accounts have changed in place spot 2
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: ownerPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: false, pubkey: serumDexPk },
        { isSigner: false, isWritable: true, pubkey: spotMarketPk },
        { isSigner: false, isWritable: true, pubkey: bidsPk },
        { isSigner: false, isWritable: true, pubkey: asksPk },
        { isSigner: false, isWritable: true, pubkey: requestQueuePk },
        { isSigner: false, isWritable: true, pubkey: eventQueuePk },
        { isSigner: false, isWritable: true, pubkey: spotMktBaseVaultPk },
        { isSigner: false, isWritable: true, pubkey: spotMktQuoteVaultPk },
        { isSigner: false, isWritable: false, pubkey: baseRootBankPk },
        { isSigner: false, isWritable: true, pubkey: baseNodeBankPk },
        { isSigner: false, isWritable: true, pubkey: baseVaultPk },
        { isSigner: false, isWritable: false, pubkey: quoteRootBankPk },
        { isSigner: false, isWritable: true, pubkey: quoteNodeBankPk },
        { isSigner: false, isWritable: true, pubkey: quoteVaultPk },
        { isSigner: false, isWritable: false, pubkey: spl_token_1.TOKEN_PROGRAM_ID },
        { isSigner: false, isWritable: false, pubkey: signerPk },
        { isSigner: false, isWritable: false, pubkey: dexSignerPk },
        { isSigner: false, isWritable: false, pubkey: msrmOrSrmVaultPk },
        ...openOrders.map(({ pubkey, isWritable }) => ({
            isSigner: false,
            isWritable,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        PlaceSpotOrder2: {
            side,
            limitPrice,
            maxBaseQuantity,
            maxQuoteQuantity,
            selfTradeBehavior,
            orderType,
            clientOrderId,
            limit: 65535,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makePlaceSpotOrder2Instruction = makePlaceSpotOrder2Instruction;
function makeUpdateRootBankInstruction(programId, entropyGroupPk, entropyCachePk, rootBankPk, nodeBanks) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyCachePk },
        { isSigner: false, isWritable: true, pubkey: rootBankPk },
        ...nodeBanks.map((pubkey) => ({
            isSigner: false,
            isWritable: true,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        UpdateRootBank: {},
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeUpdateRootBankInstruction = makeUpdateRootBankInstruction;
function makeAddOracleInstruction(programId, entropyGroupPk, oraclePk, adminPk) {
    const keys = [
        { isSigner: false, isWritable: true, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: oraclePk },
        { isSigner: true, isWritable: false, pubkey: adminPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({ AddOracle: {} });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeAddOracleInstruction = makeAddOracleInstruction;
function makeSetOracleInstruction(programId, entropyGroupPk, oraclePk, adminPk, price) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: oraclePk },
        { isSigner: true, isWritable: false, pubkey: adminPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        SetOracle: { price },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeSetOracleInstruction = makeSetOracleInstruction;
function makeAddPerpMarketInstruction(programId, entropyGroupPk, oraclePk, perpMarketPk, eventQueuePk, bidsPk, asksPk, mngoVaultPk, adminPk, maintLeverage, initLeverage, liquidationFee, makerFee, takerFee, baseLotSize, quoteLotSize, rate, maxDepthBps, targetPeriodLength, mngoPerPeriod, exp) {
    const keys = [
        { isSigner: false, isWritable: true, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: oraclePk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: false, isWritable: true, pubkey: eventQueuePk },
        { isSigner: false, isWritable: true, pubkey: bidsPk },
        { isSigner: false, isWritable: true, pubkey: asksPk },
        { isSigner: false, isWritable: false, pubkey: mngoVaultPk },
        { isSigner: true, isWritable: false, pubkey: adminPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        AddPerpMarket: {
            maintLeverage,
            initLeverage,
            liquidationFee,
            makerFee,
            takerFee,
            baseLotSize,
            quoteLotSize,
            rate,
            maxDepthBps,
            targetPeriodLength,
            mngoPerPeriod,
            exp,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeAddPerpMarketInstruction = makeAddPerpMarketInstruction;
function makeCreatePerpMarketInstruction(programId, entropyGroupPk, oraclePk, perpMarketPk, eventQueuePk, bidsPk, asksPk, mngoMintPk, mngoVaultPk, adminPk, signerPk, maintLeverage, initLeverage, liquidationFee, makerFee, takerFee, baseLotSize, quoteLotSize, rate, maxDepthBps, targetPeriodLength, mngoPerPeriod, exp, version, lmSizeShift, baseDecimals) {
    const keys = [
        { isSigner: false, isWritable: true, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: oraclePk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: false, isWritable: true, pubkey: eventQueuePk },
        { isSigner: false, isWritable: true, pubkey: bidsPk },
        { isSigner: false, isWritable: true, pubkey: asksPk },
        { isSigner: false, isWritable: false, pubkey: mngoMintPk },
        { isSigner: false, isWritable: true, pubkey: mngoVaultPk },
        { isSigner: true, isWritable: true, pubkey: adminPk },
        { isSigner: false, isWritable: true, pubkey: signerPk },
        { isSigner: false, isWritable: false, pubkey: web3_js_1.SystemProgram.programId },
        { isSigner: false, isWritable: false, pubkey: spl_token_1.TOKEN_PROGRAM_ID },
        { isSigner: false, isWritable: false, pubkey: web3_js_1.SYSVAR_RENT_PUBKEY },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        CreatePerpMarket: {
            maintLeverage,
            initLeverage,
            liquidationFee,
            makerFee,
            takerFee,
            baseLotSize,
            quoteLotSize,
            rate,
            maxDepthBps,
            targetPeriodLength,
            mngoPerPeriod,
            exp,
            version,
            lmSizeShift,
            baseDecimals,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeCreatePerpMarketInstruction = makeCreatePerpMarketInstruction;
function makeCachePerpMarketsInstruction(programId, entropyGroupPk, entropyCachePk, perpMarkets) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyCachePk },
        ...perpMarkets.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        CachePerpMarkets: {},
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeCachePerpMarketsInstruction = makeCachePerpMarketsInstruction;
function makeSettlePnlInstruction(programId, entropyGroupPk, entropyAccountAPk, entropyAccountBPk, entropyCachePk, rootBankPk, nodeBankPk, marketIndex) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountAPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountBPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: false, pubkey: rootBankPk },
        { isSigner: false, isWritable: true, pubkey: nodeBankPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        SettlePnl: {
            marketIndex,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeSettlePnlInstruction = makeSettlePnlInstruction;
function makeConsumeEventsInstruction(programId, entropyGroupPk, entropyCachePk, perpMarketPk, eventQueuePk, entropyAccountPks, limit) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: false, isWritable: true, pubkey: eventQueuePk },
        ...entropyAccountPks.sort().map((pubkey) => ({
            isSigner: false,
            isWritable: true,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        ConsumeEvents: { limit },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeConsumeEventsInstruction = makeConsumeEventsInstruction;
function makePlacePerpOrderInstruction(programId, entropyGroupPk, entropyAccountPk, ownerPk, entropyCachePk, perpMarketPk, bidsPk, asksPk, eventQueuePk, openOrders, price, quantity, clientOrderId, side, orderType, reduceOnly) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: ownerPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: false, isWritable: true, pubkey: bidsPk },
        { isSigner: false, isWritable: true, pubkey: asksPk },
        { isSigner: false, isWritable: true, pubkey: eventQueuePk },
        ...openOrders.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        PlacePerpOrder: {
            price,
            quantity,
            clientOrderId,
            side,
            orderType,
            reduceOnly: reduceOnly ? reduceOnly : false,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makePlacePerpOrderInstruction = makePlacePerpOrderInstruction;
function makeUpdateFundingInstruction(programId, entropyGroupPk, entropyCachePk, perpMarketPk, bidsPk, asksPk) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyCachePk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: false, isWritable: false, pubkey: bidsPk },
        { isSigner: false, isWritable: false, pubkey: asksPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        UpdateFunding: {},
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeUpdateFundingInstruction = makeUpdateFundingInstruction;
function makeForceCancelSpotOrdersInstruction(programId, entropyGroupPk, entropyCachePk, liqeeEntropyAccountPk, baseRootBankPk, baseNodeBankPk, baseVaultPk, quoteRootBankPk, quoteNodeBankPk, quoteVaultPk, spotMarketPk, bidsPk, asksPk, signerPk, dexEventQueuePk, dexBasePk, dexQuotePk, dexSignerPk, dexProgramPk, liqeeOpenOrdersKeys, limit) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: true, pubkey: liqeeEntropyAccountPk },
        { isSigner: false, isWritable: false, pubkey: baseRootBankPk },
        { isSigner: false, isWritable: true, pubkey: baseNodeBankPk },
        { isSigner: false, isWritable: true, pubkey: baseVaultPk },
        { isSigner: false, isWritable: false, pubkey: quoteRootBankPk },
        { isSigner: false, isWritable: true, pubkey: quoteNodeBankPk },
        { isSigner: false, isWritable: true, pubkey: quoteVaultPk },
        { isSigner: false, isWritable: true, pubkey: spotMarketPk },
        { isSigner: false, isWritable: true, pubkey: bidsPk },
        { isSigner: false, isWritable: true, pubkey: asksPk },
        { isSigner: false, isWritable: false, pubkey: signerPk },
        { isSigner: false, isWritable: true, pubkey: dexEventQueuePk },
        { isSigner: false, isWritable: true, pubkey: dexBasePk },
        { isSigner: false, isWritable: true, pubkey: dexQuotePk },
        { isSigner: false, isWritable: false, pubkey: dexSignerPk },
        { isSigner: false, isWritable: false, pubkey: dexProgramPk },
        { isSigner: false, isWritable: false, pubkey: spl_token_1.TOKEN_PROGRAM_ID },
        ...liqeeOpenOrdersKeys.map(({ pubkey, isWritable }) => ({
            isSigner: false,
            isWritable,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        ForceCancelSpotOrders: {
            limit,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeForceCancelSpotOrdersInstruction = makeForceCancelSpotOrdersInstruction;
function makeForceCancelPerpOrdersInstruction(programId, entropyGroupPk, entropyCachePk, perpMarketPk, bidsPk, asksPk, liqeeEntropyAccountPk, liqorOpenOrdersPks, limit) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: false, pubkey: perpMarketPk },
        { isSigner: false, isWritable: true, pubkey: bidsPk },
        { isSigner: false, isWritable: true, pubkey: asksPk },
        { isSigner: false, isWritable: true, pubkey: liqeeEntropyAccountPk },
        ...liqorOpenOrdersPks.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        ForceCancelPerpOrders: {
            limit,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeForceCancelPerpOrdersInstruction = makeForceCancelPerpOrdersInstruction;
function makeLiquidateTokenAndTokenInstruction(programId, entropyGroupPk, entropyCachePk, liqeeEntropyAccountPk, liqorEntropyAccountPk, liqorAccountPk, assetRootBankPk, assetNodeBankPk, liabRootBankPk, liabNodeBankPk, liqeeOpenOrdersPks, liqorOpenOrdersPks, maxLiabTransfer) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: true, pubkey: liqeeEntropyAccountPk },
        { isSigner: false, isWritable: true, pubkey: liqorEntropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: liqorAccountPk },
        { isSigner: false, isWritable: false, pubkey: assetRootBankPk },
        { isSigner: false, isWritable: true, pubkey: assetNodeBankPk },
        { isSigner: false, isWritable: false, pubkey: liabRootBankPk },
        { isSigner: false, isWritable: true, pubkey: liabNodeBankPk },
        ...liqeeOpenOrdersPks.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
        ...liqorOpenOrdersPks.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        LiquidateTokenAndToken: {
            maxLiabTransfer,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeLiquidateTokenAndTokenInstruction = makeLiquidateTokenAndTokenInstruction;
function makeLiquidateTokenAndPerpInstruction(programId, entropyGroupPk, entropyCachePk, liqeeEntropyAccountPk, liqorEntropyAccountPk, liqorAccountPk, rootBankPk, nodeBankPk, liqeeOpenOrdersPks, liqorOpenOrdersPks, assetType, assetIndex, liabType, liabIndex, maxLiabTransfer) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: true, pubkey: liqeeEntropyAccountPk },
        { isSigner: false, isWritable: true, pubkey: liqorEntropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: liqorAccountPk },
        { isSigner: false, isWritable: false, pubkey: rootBankPk },
        { isSigner: false, isWritable: true, pubkey: nodeBankPk },
        ...liqeeOpenOrdersPks.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
        ...liqorOpenOrdersPks.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        LiquidateTokenAndPerp: {
            assetType,
            assetIndex,
            liabType,
            liabIndex,
            maxLiabTransfer,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeLiquidateTokenAndPerpInstruction = makeLiquidateTokenAndPerpInstruction;
function makeLiquidatePerpMarketInstruction(programId, entropyGroupPk, entropyCachePk, perpMarketPk, eventQueuePk, liqeeEntropyAccountPk, liqorEntropyAccountPk, liqorAccountPk, liqeeOpenOrdersPks, liqorOpenOrdersPks, baseTransferRequest) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: false, isWritable: true, pubkey: eventQueuePk },
        { isSigner: false, isWritable: true, pubkey: liqeeEntropyAccountPk },
        { isSigner: false, isWritable: true, pubkey: liqorEntropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: liqorAccountPk },
        ...liqeeOpenOrdersPks.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
        ...liqorOpenOrdersPks.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        LiquidatePerpMarket: {
            baseTransferRequest,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeLiquidatePerpMarketInstruction = makeLiquidatePerpMarketInstruction;
function makeSettleFeesInstruction(programId, entropyGroupPk, entropyCachePk, perpMarketPk, entropyAccountPk, rootBankPk, nodeBankPk, bankVaultPk, feesVaultPk, signerPk) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: false, isWritable: false, pubkey: rootBankPk },
        { isSigner: false, isWritable: true, pubkey: nodeBankPk },
        { isSigner: false, isWritable: true, pubkey: bankVaultPk },
        { isSigner: false, isWritable: true, pubkey: feesVaultPk },
        // { isSigner: false, isWritable: true, pubkey: SERUM_FEES_VAULT},
        { isSigner: false, isWritable: false, pubkey: signerPk },
        { isSigner: false, isWritable: false, pubkey: spl_token_1.TOKEN_PROGRAM_ID },
    ];
    console.log("Settle Fees: ", keys);
    const data = (0, layout_1.encodeEntropyInstruction)({
        SettleFees: {},
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeSettleFeesInstruction = makeSettleFeesInstruction;
function makeResolvePerpBankruptcyInstruction(programId, entropyGroupPk, entropyCachePk, liqeeEntropyAccountPk, liqorEntropyAccountPk, liqorPk, rootBankPk, nodeBankPk, vaultPk, insuranceVaultPk, signerPk, perpMarketPk, liqorOpenOrdersPks, liabIndex, maxLiabTransfer) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyCachePk },
        { isSigner: false, isWritable: true, pubkey: liqeeEntropyAccountPk },
        { isSigner: false, isWritable: true, pubkey: liqorEntropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: liqorPk },
        { isSigner: false, isWritable: false, pubkey: rootBankPk },
        { isSigner: false, isWritable: true, pubkey: nodeBankPk },
        { isSigner: false, isWritable: true, pubkey: vaultPk },
        { isSigner: false, isWritable: true, pubkey: insuranceVaultPk },
        { isSigner: false, isWritable: false, pubkey: signerPk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: false, isWritable: false, pubkey: spl_token_1.TOKEN_PROGRAM_ID },
        ...liqorOpenOrdersPks.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        ResolvePerpBankruptcy: {
            liabIndex,
            maxLiabTransfer,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeResolvePerpBankruptcyInstruction = makeResolvePerpBankruptcyInstruction;
function makeResolveTokenBankruptcyInstruction(programId, entropyGroupPk, entropyCachePk, liqeeEntropyAccountPk, liqorEntropyAccountPk, liqorPk, quoteRootBankPk, quoteNodeBankPk, quoteVaultPk, insuranceVaultPk, signerPk, liabRootBankPk, liabNodeBankPk, liqorOpenOrdersPks, liabNodeBankPks, maxLiabTransfer) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyCachePk },
        { isSigner: false, isWritable: true, pubkey: liqeeEntropyAccountPk },
        { isSigner: false, isWritable: true, pubkey: liqorEntropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: liqorPk },
        { isSigner: false, isWritable: false, pubkey: quoteRootBankPk },
        { isSigner: false, isWritable: true, pubkey: quoteNodeBankPk },
        { isSigner: false, isWritable: true, pubkey: quoteVaultPk },
        { isSigner: false, isWritable: true, pubkey: insuranceVaultPk },
        { isSigner: false, isWritable: false, pubkey: signerPk },
        { isSigner: false, isWritable: true, pubkey: liabRootBankPk },
        { isSigner: false, isWritable: true, pubkey: liabNodeBankPk },
        { isSigner: false, isWritable: false, pubkey: spl_token_1.TOKEN_PROGRAM_ID },
        ...liqorOpenOrdersPks.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
        ...liabNodeBankPks.map((pubkey) => ({
            isSigner: false,
            isWritable: true,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        ResolveTokenBankruptcy: {
            maxLiabTransfer,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeResolveTokenBankruptcyInstruction = makeResolveTokenBankruptcyInstruction;
function makeRedeemMngoInstruction(programId, entropyGroup, entropyCache, entropyAccount, owner, perpMarket, mngoPerpVault, mngoRootBank, mngoNodeBank, mngoBankVault, signer) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroup },
        { isSigner: false, isWritable: false, pubkey: entropyCache },
        { isSigner: false, isWritable: true, pubkey: entropyAccount },
        { isSigner: true, isWritable: false, pubkey: owner },
        { isSigner: false, isWritable: false, pubkey: perpMarket },
        { isSigner: false, isWritable: true, pubkey: mngoPerpVault },
        { isSigner: false, isWritable: false, pubkey: mngoRootBank },
        { isSigner: false, isWritable: true, pubkey: mngoNodeBank },
        { isSigner: false, isWritable: true, pubkey: mngoBankVault },
        { isSigner: false, isWritable: false, pubkey: signer },
        { isSigner: false, isWritable: false, pubkey: spl_token_1.TOKEN_PROGRAM_ID },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({ RedeemMngo: {} });
    return new web3_js_1.TransactionInstruction({ keys, data, programId });
}
exports.makeRedeemMngoInstruction = makeRedeemMngoInstruction;
function makeAddEntropyAccountInfoInstruction(programId, entropyGroup, entropyAccount, owner, info) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroup },
        { isSigner: false, isWritable: true, pubkey: entropyAccount },
        { isSigner: true, isWritable: false, pubkey: owner },
    ];
    // TODO convert info into a 32 byte utf encoded byte array
    const encoded = Buffer.from(info);
    if (encoded.length > layout_1.INFO_LEN) {
        throw new Error('info string too long. Must be less than or equal to 32 bytes');
    }
    const infoArray = new Uint8Array(encoded, 0, layout_1.INFO_LEN);
    const data = (0, layout_1.encodeEntropyInstruction)({
        AddEntropyAccountInfo: { info: infoArray },
    });
    return new web3_js_1.TransactionInstruction({ keys, data, programId });
}
exports.makeAddEntropyAccountInfoInstruction = makeAddEntropyAccountInfoInstruction;
function makeDepositMsrmInstruction(programId, entropyGroup, entropyAccount, owner, msrmAccount, msrmVault, quantity) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroup },
        { isSigner: false, isWritable: true, pubkey: entropyAccount },
        { isSigner: true, isWritable: false, pubkey: owner },
        { isSigner: false, isWritable: true, pubkey: msrmAccount },
        { isSigner: false, isWritable: true, pubkey: msrmVault },
        { isSigner: false, isWritable: false, pubkey: spl_token_1.TOKEN_PROGRAM_ID },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({ DepositMsrm: { quantity } });
    return new web3_js_1.TransactionInstruction({ keys, data, programId });
}
exports.makeDepositMsrmInstruction = makeDepositMsrmInstruction;
function makeWithdrawMsrmInstruction(programId, entropyGroup, entropyAccount, owner, msrmAccount, msrmVault, signer, quantity) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroup },
        { isSigner: false, isWritable: true, pubkey: entropyAccount },
        { isSigner: true, isWritable: false, pubkey: owner },
        { isSigner: false, isWritable: true, pubkey: msrmAccount },
        { isSigner: false, isWritable: true, pubkey: msrmVault },
        { isSigner: false, isWritable: false, pubkey: signer },
        { isSigner: false, isWritable: false, pubkey: spl_token_1.TOKEN_PROGRAM_ID },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({ WithdrawMsrm: { quantity } });
    return new web3_js_1.TransactionInstruction({ keys, data, programId });
}
exports.makeWithdrawMsrmInstruction = makeWithdrawMsrmInstruction;
function makeChangePerpMarketParamsInstruction(programId, entropyGroupPk, perpMarketPk, adminPk, maintLeverage, initLeverage, liquidationFee, makerFee, takerFee, rate, maxDepthBps, targetPeriodLength, mngoPerPeriod, exp) {
    const keys = [
        { isSigner: false, isWritable: true, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: true, isWritable: false, pubkey: adminPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        ChangePerpMarketParams: {
            maintLeverageOption: maintLeverage !== undefined,
            maintLeverage: maintLeverage !== undefined ? maintLeverage : fixednum_1.ZERO_I80F48,
            initLeverageOption: initLeverage !== undefined,
            initLeverage: initLeverage !== undefined ? initLeverage : fixednum_1.ZERO_I80F48,
            liquidationFeeOption: liquidationFee !== undefined,
            liquidationFee: liquidationFee !== undefined ? liquidationFee : fixednum_1.ZERO_I80F48,
            makerFeeOption: makerFee !== undefined,
            makerFee: makerFee !== undefined ? makerFee : fixednum_1.ZERO_I80F48,
            takerFeeOption: takerFee !== undefined,
            takerFee: takerFee !== undefined ? takerFee : fixednum_1.ZERO_I80F48,
            rateOption: rate !== undefined,
            rate: rate !== undefined ? rate : fixednum_1.ZERO_I80F48,
            maxDepthBpsOption: maxDepthBps !== undefined,
            maxDepthBps: maxDepthBps !== undefined ? maxDepthBps : fixednum_1.ZERO_I80F48,
            targetPeriodLengthOption: targetPeriodLength !== undefined,
            targetPeriodLength: targetPeriodLength !== undefined ? targetPeriodLength : _1.ZERO_BN,
            mngoPerPeriodOption: mngoPerPeriod !== undefined,
            mngoPerPeriod: mngoPerPeriod !== undefined ? mngoPerPeriod : _1.ZERO_BN,
            expOption: exp !== undefined,
            exp: exp !== undefined ? exp : _1.ZERO_BN,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeChangePerpMarketParamsInstruction = makeChangePerpMarketParamsInstruction;
function makeChangePerpMarketParams2Instruction(programId, entropyGroupPk, perpMarketPk, adminPk, maintLeverage, initLeverage, liquidationFee, makerFee, takerFee, rate, maxDepthBps, targetPeriodLength, mngoPerPeriod, exp, version, lmSizeShift) {
    const keys = [
        { isSigner: false, isWritable: true, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: true, isWritable: false, pubkey: adminPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        ChangePerpMarketParams2: {
            maintLeverageOption: maintLeverage !== undefined,
            maintLeverage: maintLeverage !== undefined ? maintLeverage : fixednum_1.ZERO_I80F48,
            initLeverageOption: initLeverage !== undefined,
            initLeverage: initLeverage !== undefined ? initLeverage : fixednum_1.ZERO_I80F48,
            liquidationFeeOption: liquidationFee !== undefined,
            liquidationFee: liquidationFee !== undefined ? liquidationFee : fixednum_1.ZERO_I80F48,
            makerFeeOption: makerFee !== undefined,
            makerFee: makerFee !== undefined ? makerFee : fixednum_1.ZERO_I80F48,
            takerFeeOption: takerFee !== undefined,
            takerFee: takerFee !== undefined ? takerFee : fixednum_1.ZERO_I80F48,
            rateOption: rate !== undefined,
            rate: rate !== undefined ? rate : fixednum_1.ZERO_I80F48,
            maxDepthBpsOption: maxDepthBps !== undefined,
            maxDepthBps: maxDepthBps !== undefined ? maxDepthBps : fixednum_1.ZERO_I80F48,
            targetPeriodLengthOption: targetPeriodLength !== undefined,
            targetPeriodLength: targetPeriodLength !== undefined ? targetPeriodLength : _1.ZERO_BN,
            mngoPerPeriodOption: mngoPerPeriod !== undefined,
            mngoPerPeriod: mngoPerPeriod !== undefined ? mngoPerPeriod : _1.ZERO_BN,
            expOption: exp !== undefined,
            exp: exp !== undefined ? exp : _1.ZERO_BN,
            versionOption: version !== undefined,
            version: version !== undefined ? version : _1.ZERO_BN,
            lmSizeShiftOption: lmSizeShift !== undefined,
            lmSizeShift: lmSizeShift !== undefined ? lmSizeShift : _1.ZERO_BN,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeChangePerpMarketParams2Instruction = makeChangePerpMarketParams2Instruction;
function makeSetGroupAdminInstruction(programId, entropyGroupPk, newAdminPk, adminPk) {
    const keys = [
        { isSigner: false, isWritable: true, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: newAdminPk },
        { isSigner: true, isWritable: false, pubkey: adminPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        SetGroupAdmin: {},
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeSetGroupAdminInstruction = makeSetGroupAdminInstruction;
function makeRemoveAdvancedOrderInstruction(programId, entropyGroupPk, entropyAccountPk, ownerPk, advancedOrdersPk, orderIndex) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: entropyAccountPk },
        { isSigner: true, isWritable: true, pubkey: ownerPk },
        { isSigner: false, isWritable: true, pubkey: advancedOrdersPk },
        { isSigner: false, isWritable: false, pubkey: web3_js_1.SystemProgram.programId },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        RemoveAdvancedOrder: { orderIndex },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeRemoveAdvancedOrderInstruction = makeRemoveAdvancedOrderInstruction;
function makeInitAdvancedOrdersInstruction(programId, entropyGroupPk, entropyAccountPk, ownerPk, advancedOrdersPk) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: true, isWritable: false, pubkey: ownerPk },
        { isSigner: false, isWritable: true, pubkey: advancedOrdersPk },
        { isSigner: false, isWritable: false, pubkey: web3_js_1.SystemProgram.programId },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        InitAdvancedOrders: {},
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeInitAdvancedOrdersInstruction = makeInitAdvancedOrdersInstruction;
function makeAddPerpTriggerOrderInstruction(programId, entropyGroupPk, entropyAccountPk, ownerPk, advancedOrdersPk, entropyCachePk, perpMarketPk, openOrders, orderType, side, price, quantity, triggerCondition, triggerPrice, reduceOnly, clientOrderId) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: false, pubkey: entropyAccountPk },
        { isSigner: true, isWritable: true, pubkey: ownerPk },
        { isSigner: false, isWritable: true, pubkey: advancedOrdersPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: false, pubkey: perpMarketPk },
        { isSigner: false, isWritable: false, pubkey: web3_js_1.SystemProgram.programId },
        ...openOrders.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        AddPerpTriggerOrder: {
            price,
            quantity,
            clientOrderId,
            side,
            orderType,
            triggerCondition,
            triggerPrice,
            reduceOnly,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeAddPerpTriggerOrderInstruction = makeAddPerpTriggerOrderInstruction;
function makeExecutePerpTriggerOrderInstruction(programId, entropyGroupPk, entropyAccountPk, advancedOrdersPk, agentPk, entropyCachePk, perpMarketPk, bidsPk, asksPk, eventQueuePk, openOrders, orderIndex) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        { isSigner: false, isWritable: true, pubkey: advancedOrdersPk },
        { isSigner: true, isWritable: true, pubkey: agentPk },
        { isSigner: false, isWritable: false, pubkey: entropyCachePk },
        { isSigner: false, isWritable: true, pubkey: perpMarketPk },
        { isSigner: false, isWritable: true, pubkey: bidsPk },
        { isSigner: false, isWritable: true, pubkey: asksPk },
        { isSigner: false, isWritable: true, pubkey: eventQueuePk },
        ...openOrders.map((pubkey) => ({
            isSigner: false,
            isWritable: false,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        ExecutePerpTriggerOrder: {
            orderIndex,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeExecutePerpTriggerOrderInstruction = makeExecutePerpTriggerOrderInstruction;
function makeUpdateMarginBasketInstruction(programId, entropyGroupPk, entropyAccountPk, openOrdersPks) {
    const keys = [
        { isSigner: false, isWritable: false, pubkey: entropyGroupPk },
        { isSigner: false, isWritable: true, pubkey: entropyAccountPk },
        ...openOrdersPks.map((pubkey) => ({
            isSigner: false,
            isWritable: true,
            pubkey,
        })),
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        UpdateMarginBasket: {},
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeUpdateMarginBasketInstruction = makeUpdateMarginBasketInstruction;
function makeChangeMaxEntropyAccountsInstruction(programId, entropyGroupPk, adminPk, maxEntropyAccounts) {
    const keys = [
        { isSigner: false, isWritable: true, pubkey: entropyGroupPk },
        { isSigner: true, isWritable: false, pubkey: adminPk },
    ];
    const data = (0, layout_1.encodeEntropyInstruction)({
        ChangeMaxEntropyAccounts: {
            maxEntropyAccounts,
        },
    });
    return new web3_js_1.TransactionInstruction({
        keys,
        data,
        programId,
    });
}
exports.makeChangeMaxEntropyAccountsInstruction = makeChangeMaxEntropyAccountsInstruction;
//# sourceMappingURL=instruction.js.map